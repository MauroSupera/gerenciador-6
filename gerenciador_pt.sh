#!/bin/bash

# === CORES ANSI ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m'  # Sem cor

# === CONFIGURA√á√ïES ===
# Configura√ß√£o da API esperada. Esta √© a chave utilizada para validar a conex√£o com o gerenciador principal.
API_ESPERADA="VORTEXUSCLOUD"

# === FUN√á√ÉO PARA VALIDAR A API ===
# Esta fun√ß√£o verifica se a API fornecida pelo gerenciador principal corresponde √† chave esperada.
# Se n√£o corresponder, o script exibe uma mensagem de erro e encerra.
# O usu√°rio n√£o deve alterar esta fun√ß√£o, a menos que entenda o funcionamento do sistema de valida√ß√£o.
validar_api() {
    API_RECEBIDA=$1
    if [ "$API_RECEBIDA" != "$API_ESPERADA" ]; then
        echo -e "${RED}API N√ÉO CONSEGUE SE CONECTAR AO ARQUIVO GERENCIADOR.SH.${NC}"
        echo -e "${YELLOW}POR FAVOR, FORNE√áA O ARQUIVO DE CONFIGURA√á√ÉO PARA CONSEGUIR EXECUTAR ESTE ARQUIVO.${NC}"
        echo -e "${YELLOW}CASO N√ÉO SAIBA, ENTRE EM CONTATO COM NOSSO SUPORTE:${NC}"
        echo -e "${CYAN}HTTPS://VORTEXCLOUD.COM.BR${NC}"
        exit 1
    fi
}

# === INICIALIZA√á√ÉO DO GERENCIADOR ===
# Valida a API fornecida e, se correta, inicia os sistemas. O usu√°rio pode adicionar
# comandos personalizados ap√≥s a valida√ß√£o, se necess√°rio.
echo -e "${CYAN}==============================================${NC}"
echo -e "${YELLOW}VALIDANDO API...${NC}"
validar_api "$1"
echo -e "${GREEN}A API CONECTOU-SE COM SUCESSO! SISTEMAS VALIDADOS.${NC}"
echo -e "${CYAN}==============================================${NC}"

# === ABAIXO COMECA A EXECUTAR O SCRIPT MAS PRIMEIRO VERIFICA OS HOSTNAMES E IPS ===


# ###########################################
# Configura√ß√µes da whitelist
# - Prop√≥sito: Define os hostnames e IPs autorizados para o sistema.
# - Editar: 
#   * Voc√™ pode adicionar ou remover hostnames em `WHITELIST_HOSTNAMES`.
#   * Pode incluir ou excluir IPs em `WHITELIST_IPS`.
# - N√£o editar: A estrutura da lista e a l√≥gica de valida√ß√£o devem permanecer intactas.
# ###########################################
WHITELIST_HOSTNAMES=("app.vexufy.com")
WHITELIST_IPS=("199.85.209.85" "199.85.209.109")
VALIDATED=false  # Flag para indicar se o ambiente foi validado com sucesso.

# ###########################################
# Fun√ß√£o para obter IPs privados e p√∫blicos
# - Prop√≥sito: Coleta os IPs privados e p√∫blicos do servidor em execu√ß√£o.
# - Editar: N√£o √© necess√°rio editar esta fun√ß√£o, pois ela √© independente de configura√ß√µes externas.
# ###########################################
obter_ips() {
    # Obt√©m o IP privado
    IP_PRIVADO=$(hostname -I | awk '{print $1}')
    
    # Obt√©m o IP p√∫blico usando diferentes servi√ßos online
    IP_PUBLICO=""
    SERVICOS=("ifconfig.me" "api64.ipify.org" "ipecho.net/plain")
    
    for SERVICO in "${SERVICOS[@]}"; do
        IP_PUBLICO=$(curl -s --max-time 5 "http://${SERVICO}")
        if [[ $IP_PUBLICO =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            break
        fi
    done

    # Caso n√£o consiga obter o IP p√∫blico
    if [ -z "$IP_PUBLICO" ]; then
        IP_PUBLICO="N√£o foi poss√≠vel obter o IP p√∫blico"
    fi

    echo "$IP_PRIVADO" "$IP_PUBLICO"
}

# ###########################################
# Fun√ß√£o para validar o ambiente
# - Prop√≥sito: Confirma se o ambiente atual est√° autorizado a executar o sistema.
# - Editar:
#   * Voc√™ pode ajustar as mensagens exibidas no terminal (os comandos `echo`).
# - N√£o editar: N√£o altere a l√≥gica de verifica√ß√£o ou o comportamento do loop.
# ###########################################
validar_ambiente() {
    # Exibe uma mensagem de valida√ß√£o inicial
    echo -e "\033[1;36m======================================"
    echo -e "       VALIDANDO AMBIENTE..."
    echo -e "======================================\033[0m"
    sleep 2  # Simula o tempo de valida√ß√£o

    # Coleta os IPs p√∫blico e privado
    read -r IP_PRIVADO IP_PUBLICO <<<"$(obter_ips)"

    # Resolve os IPs dos hostnames na whitelist
    for HOSTNAME in "${WHITELIST_HOSTNAMES[@]}"; do
        RESOLVIDOS=$(getent ahosts "$HOSTNAME" | awk '{print $1}' | sort -u)
        WHITELIST_IPS+=($RESOLVIDOS)
    done

    # Mostra as informa√ß√µes coletadas
    echo -e "\033[1;33mHostname atual: $(hostname)"
    echo -e "IP privado atual: $IP_PRIVADO"
    echo -e "IP p√∫blico atual: $IP_PUBLICO"
    echo -e "======================================\033[0m"
    sleep 3  # D√° tempo para o usu√°rio ver as informa√ß√µes

    # Verifica se o IP privado ou p√∫blico est√° autorizado
    if [[ " ${WHITELIST_IPS[@]} " =~ " ${IP_PRIVADO} " ]] || [[ " ${WHITELIST_IPS[@]} " =~ " ${IP_PUBLICO} " ]]; then
        echo -e "\033[1;32m‚úî Ambiente validado com sucesso! Continuando...\033[0m"
        VALIDATED=true
        return 0
    fi

    # Loop para ambientes n√£o autorizados
    while true; do
        clear
        echo -e "\033[1;31m======================================"
        echo -e "‚ùå ERRO: AMBIENTE N√ÉO AUTORIZADO"
        echo -e "--------------------------------------"
        echo -e "‚ö†Ô∏è  Este sistema n√£o √© licenciado para uso externo."
        echo -e "‚ö†Ô∏è  √â estritamente proibido utilizar este sistema fora dos servidores autorizados."
        echo -e "--------------------------------------"
        echo -e "‚û°Ô∏è  Hostname atual: $(hostname)"
        echo -e "‚û°Ô∏è  IP privado atual: $IP_PRIVADO"
        echo -e "‚û°Ô∏è  IP p√∫blico atual: $IP_PUBLICO"
        echo -e "--------------------------------------"
        echo -e "‚úÖ Servidores autorizados: ${WHITELIST_HOSTNAMES[*]}"
        echo -e "‚úÖ IPs autorizados: ${WHITELIST_IPS[*]}"
        echo -e "--------------------------------------"
        echo -e "üí° Para adquirir uma licen√ßa ou contratar nossos servi√ßos de hospedagem:"
        echo -e "   üåê Acesse clicando aqui: \033[1;34mhttps://vortexuscloud.com.br\033[0m"
        echo -e "======================================\033[0m"
        sleep 10
    done
}

# ###########################################
# Fun√ß√£o de valida√ß√£o secund√°ria
# - Prop√≥sito: Realiza uma valida√ß√£o adicional para confirmar o ambiente autorizado.
# - Editar: N√£o √© necess√°rio editar esta fun√ß√£o.
# ###########################################
validar_secundario() {
    echo -e "\033[1;36mRevalidando ambiente...\033[0m"
    sleep 2
    validar_ambiente
}

# ###########################################
# Verifica√ß√£o inicial da whitelist
# - Prop√≥sito: Realiza a valida√ß√£o antes de iniciar qualquer opera√ß√£o.
# - Editar: N√£o √© necess√°rio editar esta fun√ß√£o.
# ###########################################
if [ "$VALIDATED" = false ]; then
    validar_ambiente
fi

# ###########################################
# In√≠cio do script principal
# - Prop√≥sito: Exibe uma mensagem inicial ap√≥s a valida√ß√£o bem-sucedida.
# - Editar: Pode ajustar o texto exibido pelo comando `echo`.
# ###########################################
echo -e "\033[1;36mBem-vindo ao sistema autorizado! Preparando valida√ß√µes subsequentes...\033[0m"
sleep 5
validar_secundario

echo -e "\033[1;32m======================================"
echo -e "    Sistema autorizado e operacional!"
echo -e "======================================\033[0m"

# ###########################################
# Configura√ß√µes principais
# - Prop√≥sito: Define o diret√≥rio base e outras configura√ß√µes essenciais do sistema.
# - Editar:
#   * `BASE_DIR`: Modifique para alterar o diret√≥rio base onde os ambientes ser√£o criados.
#   * `NUM_AMBIENTES`: Ajuste o n√∫mero de ambientes que deseja criar.
#   * `TERMS_FILE`: Altere o caminho do arquivo de termos, se necess√°rio.
# - N√£o editar: N√£o altere a l√≥gica de uso das vari√°veis, apenas seus valores.
# ###########################################
BASE_DIR="/home/container" # Diret√≥rio base onde os ambientes ser√£o criados.
NUM_AMBIENTES=8           # N√∫mero de ambientes que ser√£o configurados.
TERMS_FILE="${BASE_DIR}/termos_accepted.txt" # Caminho do arquivo que indica a aceita√ß√£o dos termos de servi√ßo.

# ###########################################
# Cores ANSI
# - Prop√≥sito: Define cores para sa√≠da no terminal.
# - Editar: N√£o √© necess√°rio editar a configura√ß√£o das cores.
# ###########################################
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m' # Sem cor

# ###########################################
# Fun√ß√£o de anima√ß√£o
# - Prop√≥sito: Exibe um texto animado no terminal.
# - Editar: Voc√™ pode alterar o texto passado para a fun√ß√£o quando utiliz√°-la.
# - N√£o editar: N√£o √© necess√°rio alterar a l√≥gica da anima√ß√£o.
# ###########################################
anima_texto() {
    local texto="$1"
    local delay=0.1
    for (( i=0; i<${#texto}; i++ )); do
        printf "${YELLOW}${texto:$i:1}${NC}"
        sleep "$delay"
    done
    echo ""
}

# ###########################################
# Fun√ß√£o para exibir o outdoor 3D com texto est√°tico
# - Prop√≥sito: Exibe um cabe√ßalho em formato de arte ASCII.
# - Editar:
#   * Voc√™ pode personalizar o texto ASCII e as informa√ß√µes exibidas abaixo.
#   * Altere os links ou mensagens para adequar ao seu projeto.
# - N√£o editar: A l√≥gica para centralizar o texto e exibir a anima√ß√£o.
# ###########################################
exibir_outdoor_3D() {
    clear
    local width=$(tput cols)  # Largura do terminal
    local height=$(tput lines)  # Altura do terminal
    local start_line=$(( height / 3 ))
    local start_col=$(( (width - 60) / 2 ))  # Centraliza o texto

    # Arte 3D do texto principal
    local outdoor_text=(
        " _   _  ___________ _____ _______   ___   _ _____ "
        "| | | ||  _  | ___ \\_   _|  ___\\ \\ / / | | /  ___|"
        "| | | || | | | |_/ / | | | |__  \\ V /| | | \\ --. "
        "| | | || | | |    /  | | |  __| /   \\| | | |--. \\"
        "\\ \\_/ /\\ \\_/ / |\\ \\  | | | |___/ /^\\ \\ |_| /\\__/ /"
        " \\___/  \\___/\\_| \\_| \\_/ \\____/\\/   \\/\\___/\\____/ "
    )

    # Exibe o texto 3D centralizado
    for i in "${!outdoor_text[@]}"; do
        tput cup $((start_line + i)) $start_col
        echo -e "${CYAN}${outdoor_text[i]}${NC}"
    done

    # Exibe "Created by Mauro Gashfix" diretamente abaixo do texto 3D
    local footer="Created by Mauro Gashfix"
    tput cup $((start_line + ${#outdoor_text[@]} + 1)) $(( (width - ${#footer}) / 2 ))
    echo -e "${YELLOW}${footer}${NC}"

    # Exibe os links diretamente abaixo do footer
    local links="vortexuscloud.com.br & vortexuscloud.com"
    tput cup $((start_line + ${#outdoor_text[@]} + 2)) $(( (width - ${#links}) / 2 ))
    echo -e "${GREEN}${links}${NC}"

    # Exibe a barra de inicializa√ß√£o diretamente abaixo dos links
    local progress_bar="Inicializando..."
    tput cup $((start_line + ${#outdoor_text[@]} + 4)) $(( (width - ${#progress_bar} - 20) / 2 ))
    echo -ne "${CYAN}${progress_bar}${NC}"
    for i in $(seq 1 20); do
        echo -ne "${GREEN}#${NC}"
        sleep 0.1
    done
    echo ""
}

# ###########################################
# Fun√ß√£o para exibir os termos de servi√ßo
# - Prop√≥sito: Solicita que o usu√°rio aceite os termos antes de continuar.
# - Editar:
#   * Personalize as mensagens de termos de servi√ßo exibidas ao usu√°rio.
#   * Altere o texto "ACEITA OS TERMOS?" para refletir as pol√≠ticas do seu projeto.
# - N√£o editar: A l√≥gica de verifica√ß√£o e armazenamento do aceite.
# ###########################################
exibir_termos() {
    exibir_outdoor_3D
    sleep 1
    echo -e "${BLUE}Este sistema √© permitido apenas na plataforma Vortexus Cloud.${NC}"
    echo -e "${CYAN}======================================${NC}"

    if [ ! -f "$TERMS_FILE" ]; then
        while true; do
            echo -e "${YELLOW}VOC√ä ACEITA OS TERMOS DE SERVI√áO? (SIM/N√ÉO)${NC}"
            read -p "> " ACEITE
            if [ "$ACEITE" = "sim" ]; then
                echo -e "${GREEN}Termos aceitos em $(date).${NC}" > "$TERMS_FILE"
                echo -e "${CYAN}======================================${NC}"
                echo -e "${GREEN}TERMOS ACEITOS. PROSSEGUINDO...${NC}"
                break
            elif [ "$ACEITE" = "n√£o" ]; then
                echo -e "${RED}VOC√ä DEVE ACEITAR OS TERMOS PARA CONTINUAR.${NC}"
            else
                echo -e "${RED}OP√á√ÉO INV√ÅLIDA. DIGITE 'SIM' OU 'N√ÉO'.${NC}"
            fi
        done
    else
        echo -e "${GREEN}TERMOS J√Å ACEITOS ANTERIORMENTE. PROSSEGUINDO...${NC}"
    fi
}

# ###########################################
# Fun√ß√£o para criar pastas dos ambientes
# - Prop√≥sito: Cria as pastas necess√°rias para cada ambiente configurado.
# - Editar:
#   * Altere o n√∫mero de ambientes em `NUM_AMBIENTES` se desejar criar mais ou menos pastas.
# - N√£o editar: A l√≥gica de cria√ß√£o de pastas.
# ###########################################
criar_pastas() {
    for i in $(seq 1 $NUM_AMBIENTES); do
        AMBIENTE_PATH="${BASE_DIR}/ambiente${i}"
        if [ ! -d "$AMBIENTE_PATH" ]; then
            mkdir -p "$AMBIENTE_PATH"
            echo -e "${GREEN}PASTA DO AMBIENTE ${i} CRIADA.${NC}"
        fi
    done
}

# ###########################################
# Atualizar status do ambiente
# - Prop√≥sito: Atualiza o status de um ambiente espec√≠fico.
# - Editar: N√£o √© necess√°rio editar esta fun√ß√£o.
# ###########################################
atualizar_status() {
    AMBIENTE_PATH=$1
    NOVO_STATUS=$2
    echo "$NOVO_STATUS" > "${AMBIENTE_PATH}/status"
    echo -e "${CYAN}Status do ambiente atualizado para: ${GREEN}${NOVO_STATUS}${NC}"
}

# ###########################################
# Recuperar status do ambiente
# - Prop√≥sito: Obt√©m o status atual de um ambiente espec√≠fico.
# - Editar: N√£o √© necess√°rio editar esta fun√ß√£o.
# ###########################################
recuperar_status() {
    AMBIENTE_PATH=$1
    if [ -f "${AMBIENTE_PATH}/status" ]; then
        cat "${AMBIENTE_PATH}/status"
    else
        echo "OFF"
    fi
}

# ###########################################
# Fun√ß√£o para verificar e reiniciar sess√µes em background
# - Prop√≥sito: Verifica se h√° sess√µes em execu√ß√£o nos ambientes e reinicia, se necess√°rio.
# - Editar: N√£o √© necess√°rio editar essa fun√ß√£o. Somente ajuste as mensagens de texto para refletir o seu projeto.
# - N√£o editar: A l√≥gica de verifica√ß√£o de sess√µes e rein√≠cio.
# ###########################################
verificar_sessoes() {
    echo -e "${CYAN}======================================${NC}"
    anima_texto "VERIFICANDO SESSOES EM BACKGROUND..."
    for i in $(seq 1 $NUM_AMBIENTES); do
        AMBIENTE_PATH="${BASE_DIR}/ambiente${i}"
        if [ -f "${AMBIENTE_PATH}/.session" ]; then
            STATUS=$(recuperar_status "$AMBIENTE_PATH")
            if [ "$STATUS" = "ON" ]; then
                COMANDO=$(cat "${AMBIENTE_PATH}/.session")
                
                if [ -n "$COMANDO" ]; then
                    echo -e "${YELLOW}Executando sess√£o em background para o ambiente ${i}...${NC}"
                    pkill -f "$COMANDO" 2>/dev/null
                    cd "$AMBIENTE_PATH" || continue
                    nohup $COMANDO > nohup.out 2>&1 &
                    if [ $? -eq 0 ]; then
                        echo -e "${GREEN}SESS√ÉO EM BACKGROUND ATIVA PARA O AMBIENTE ${i}.${NC}"
                    else
                        echo -e "${RED}Erro ao tentar ativar a sess√£o no ambiente ${i}.${NC}"
                    fi
                else
                    echo -e "${YELLOW}Comando vazio encontrado no arquivo .session do ambiente ${i}.${NC}"
                fi
            else
                echo -e "${RED}O ambiente ${i} est√° com status OFF. Ignorando...${NC}"
            fi
        else
            echo -e "${RED}Nenhum arquivo .session encontrado no ambiente ${i}.${NC}"
        fi
    done
    echo -e "${CYAN}======================================${NC}"
}

# ###########################################
# Fun√ß√£o para exibir o menu principal
# - Prop√≥sito: Gerencia a navega√ß√£o entre os ambientes configurados.
# - Editar: Ajuste as mensagens e op√ß√µes de texto conforme necess√°rio.
# - N√£o editar: A l√≥gica de navega√ß√£o e escolha de ambiente.
# ###########################################
menu_principal() {
    echo -e "${CYAN}======================================${NC}"
    anima_texto "       GERENCIAMENTO DE AMBIENTES"
    echo -e "${CYAN}======================================${NC}"
    for i in $(seq 1 $NUM_AMBIENTES); do
        AMBIENTE_PATH="${BASE_DIR}/ambiente${i}"
        STATUS=$(recuperar_status "$AMBIENTE_PATH")
        echo -e "${YELLOW}AMBIENTE ${i}:${NC} ${GREEN}STATUS - $STATUS${NC}"
    done
    echo -e "${CYAN}======================================${NC}"
    echo -e "${YELLOW}ESCOLHA UM AMBIENTE PARA GERENCIAR (1-${NUM_AMBIENTES}):${NC}"
    echo -e "${RED}0 - SAIR${NC}"
    read -p "> " AMBIENTE_ESCOLHIDO

    if [ "$AMBIENTE_ESCOLHIDO" -ge 1 ] && [ "$AMBIENTE_ESCOLHIDO" -le "$NUM_AMBIENTES" ]; then
        gerenciar_ambiente "$AMBIENTE_ESCOLHIDO"
    elif [ "$AMBIENTE_ESCOLHIDO" = "0" ]; then
        anima_texto "SAINDO..."
        exit 0
    else
        echo -e "${RED}ESCOLHA INV√ÅLIDA. TENTE NOVAMENTE.${NC}"
        menu_principal
    fi
}

# ###########################################
# Fun√ß√£o para escolher um bot pronto da Vortexus
# - Prop√≥sito: Permite ao usu√°rio selecionar uma lista de bots dispon√≠veis.
# - Editar: Adicione ou remova op√ß√µes de idiomas dispon√≠veis.
# - N√£o editar: A l√≥gica de escolha e navega√ß√£o de menus.
# ###########################################
escolher_bot_pronto() {
    AMBIENTE_PATH=$1
    echo -e "${CYAN}======================================${NC}"
    anima_texto "       ESCOLHER BOT PRONTO"
    echo -e "${CYAN}======================================${NC}"
    echo -e "${YELLOW}1 - BOTS EM PORTUGU√äS${NC}"
    echo -e "${YELLOW}2 - BOTS EM ESPANHOL${NC}"
    echo -e "${RED}0 - VOLTAR${NC}"
    read -p "> " OPCAO_BOT

    case $OPCAO_BOT in
        1)
            listar_bots "$AMBIENTE_PATH" "portugues"
            ;;
        2)
            listar_bots "$AMBIENTE_PATH" "espanhol"
            ;;
        0)
            menu_principal
            ;;
        *)
            echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
            escolher_bot_pronto "$AMBIENTE_PATH"
            ;;
    esac
}

# ###########################################
# Fun√ß√£o para listar bots dispon√≠veis
# - Prop√≥sito: Lista os bots dispon√≠veis de acordo com o idioma selecionado.
# - Editar:
#   * Para adicionar novos bots, insira uma nova linha na estrutura correspondente ao idioma:
#     Exemplo para portugu√™s:
#       "NOME DO BOT - LINK DO REPOSIT√ìRIO"
#   * Para adicionar novos idiomas, copie a estrutura `elif` e substitua o idioma e os bots.
# - N√£o editar: A l√≥gica de listagem e sele√ß√£o de bots.
# ###########################################
listar_bots() {
    AMBIENTE_PATH=$1
    LINGUA=$2
    echo -e "${CYAN}======================================${NC}"
    anima_texto "       BOTS DISPON√çVEIS - ${LINGUA^^}"
    echo -e "${CYAN}======================================${NC}"

    # Estrutura de bots dispon√≠veis
    if [ "$LINGUA" = "portugues" ]; then
        BOTS=(
            "BLACK BOT - https://github.com/MauroSupera/blackbot.git"
            "YOSHINO BOT - https://github.com/MauroSupera/yoshinobot.git"
            "MIKASA ASCENDANCY V3 - https://github.com/maurogashfix/MikasaAscendancyv3.git"
            "INATSUKI BOT - https://github.com/MauroSupera/inatsukibot.git"
            "ESDEATH BOT - https://github.com/Salientekill/ESDEATHBOT.git"
            "CHRIS BOT - https://github.com/MauroSupera/chrisbot.git"
            "TAIGA BOT - https://github.com/MauroSupera/TAIGA-BOT3.git"
            "AGATHA BOT - https://github.com/MauroSupera/agathabotnew.git"
        )
    elif [ "$LINGUA" = "espanhol" ]; then
        BOTS=(
            "GATA BOT - https://github.com/GataNina-Li/GataBot-MD.git"
            "GATA BOT LITE - https://github.com/GataNina-Li/GataBotLite-MD.git"
            "KATASHI BOT - https://github.com/KatashiFukushima/KatashiBot-MD.git"
            "CURIOSITY BOT - https://github.com/AzamiJs/CuriosityBot-MD.git"
            "NOVA BOT - https://github.com/elrebelde21/NovaBot-MD.git"
            "MEGUMIN BOT - https://github.com/David-Chian/Megumin-Bot-MD"
            "YAEMORI BOT - https://github.com/Dev-Diego/YaemoriBot-MD"
            "THEMYSTIC BOT - https://github.com/BrunoSobrino/TheMystic-Bot-MD.git"
        )
    fi

    # Passo a passo para adicionar bots:
    # 1. Para cada idioma, localize o bloco `if [ "$LINGUA" = "<idioma>" ];`.
    # 2. Adicione uma nova linha no formato:
    #    "NOME DO BOT - LINK DO REPOSIT√ìRIO"
    # 3. Para adicionar um novo idioma:
    #    a. Copie um dos blocos existentes (como o `elif [ "$LINGUA" = "espanhol" ];`).
    #    b. Substitua `<idioma>` pelo novo idioma.
    #    c. Adicione os bots correspondentes.
    # 4. Certifique-se de manter o formato correto para que os bots sejam exibidos corretamente.

    for i in "${!BOTS[@]}"; do
        echo -e "${GREEN}$((i+1)) - ${BOTS[$i]%% -*}${NC}"
    done
    echo -e "${RED}0 - VOLTAR${NC}"

    read -p "> " BOT_ESCOLHIDO

    if [ "$BOT_ESCOLHIDO" -ge 1 ] && [ "$BOT_ESCOLHIDO" -le "${#BOTS[@]}" ]; then
        REPOSITORIO="${BOTS[$((BOT_ESCOLHIDO-1))]#*- }"
        verificar_instalacao_bot "$AMBIENTE_PATH" "$REPOSITORIO"
    elif [ "$BOT_ESCOLHIDO" = "0" ]; then
        escolher_bot_pronto "$AMBIENTE_PATH"
    else
        echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
        listar_bots "$AMBIENTE_PATH" "$LINGUA"
    fi
}


# ###########################################
# Fun√ß√£o para verificar a instala√ß√£o de um bot
# - Prop√≥sito: Checa se j√° existe um bot instalado no ambiente. Se sim, oferece a op√ß√£o de substitu√≠-lo.
# - Editar: N√£o √© necess√°rio editar a l√≥gica. Somente ajuste as mensagens de texto, se necess√°rio.
# ###########################################
verificar_instalacao_bot() {
    AMBIENTE_PATH=$1
    REPOSITORIO=$2

    if [ -f "${AMBIENTE_PATH}/package.json" ]; then
        echo -e "${YELLOW}J√° existe um bot instalado neste ambiente.${NC}"
        echo -e "${YELLOW}Deseja remover o bot existente para instalar o novo? (sim/n√£o)${NC}"
        read -p "> " RESPOSTA
        if [ "$RESPOSTA" = "sim" ]; then
            remover_bot "$AMBIENTE_PATH"
            instalar_novo_bot "$AMBIENTE_PATH" "$REPOSITORIO"
        else
            echo -e "${RED}Retornando ao menu principal...${NC}"
            menu_principal
        fi
    else
        instalar_novo_bot "$AMBIENTE_PATH" "$REPOSITORIO"
    fi
}

# ###########################################
# Fun√ß√£o para instalar um novo bot
# - Prop√≥sito: Clona o reposit√≥rio do bot e verifica os m√≥dulos necess√°rios para instala√ß√£o.
# - Editar: N√£o √© necess√°rio editar a l√≥gica. Apenas ajuste as mensagens, se necess√°rio.
# ###########################################
instalar_novo_bot() {
    AMBIENTE_PATH=$1
    REPOSITORIO=$2

    NOME_BOT=$(basename "$REPOSITORIO" .git)
    echo -e "${CYAN}Iniciando a instala√ß√£o do bot: ${GREEN}$NOME_BOT${NC}..."
    git clone "$REPOSITORIO" "$AMBIENTE_PATH" 2>/dev/null
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Bot $NOME_BOT instalado com sucesso no ambiente $AMBIENTE_PATH!${NC}"
        verificar_node_modules "$AMBIENTE_PATH"
    else
        echo -e "${RED}Erro ao clonar o reposit√≥rio do bot $NOME_BOT. Verifique a URL e tente novamente.${NC}"
    fi
}

# ###########################################
# Fun√ß√£o para verificar e instalar m√≥dulos Node.js
# - Prop√≥sito: Certifica-se de que todos os m√≥dulos necess√°rios estejam instalados.
# - Editar: Apenas ajuste as mensagens, se necess√°rio.
# ###########################################
verificar_node_modules() {
    AMBIENTE_PATH=$1
    if [ ! -d "${AMBIENTE_PATH}/node_modules" ]; then
        echo -e "${YELLOW}M√≥dulos n√£o instalados neste bot.${NC}"
        echo -e "${YELLOW}Escolha uma op√ß√£o para instala√ß√£o:${NC}"
        echo -e "${GREEN}1 - npm install${NC}"
        echo -e "${GREEN}2 - yarn install${NC}"
        echo -e "${RED}0 - Voltar${NC}"
        read -p "> " OPCAO_MODULOS
        case $OPCAO_MODULOS in
            1)
                echo -e "${CYAN}Instalando m√≥dulos com npm...${NC}"
                cd "$AMBIENTE_PATH" && npm install
                [ $? -eq 0 ] && echo -e "${GREEN}M√≥dulos instalados com sucesso!${NC}" || echo -e "${RED}Erro ao instalar m√≥dulos com npm.${NC}"
                ;;
            2)
                echo -e "${CYAN}Instalando m√≥dulos com yarn...${NC}"
                cd "$AMBIENTE_PATH" && yarn install
                [ $? -eq 0 ] && echo -e "${GREEN}M√≥dulos instalados com sucesso!${NC}" || echo -e "${RED}Erro ao instalar m√≥dulos com yarn.${NC}"
                ;;
            0)
                menu_principal
                ;;
            *)
                echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
                verificar_node_modules "$AMBIENTE_PATH"
                ;;
        esac
    else
        echo -e "${GREEN}Todos os m√≥dulos necess√°rios j√° est√£o instalados.${NC}"
    fi
    pos_clone_menu "$AMBIENTE_PATH"
}

# ###########################################
# Fun√ß√£o para remover bot atual
# - Prop√≥sito: Remove todos os arquivos do ambiente para liberar espa√ßo para outro bot.
# - Editar: Apenas ajuste as mensagens, se necess√°rio.
# ###########################################
remover_bot() {
    AMBIENTE_PATH=$1

    if [ -f "${AMBIENTE_PATH}/package.json" ]; then
        echo -e "${YELLOW}Bot detectado neste ambiente.${NC}"
        echo -e "${RED}Deseja realmente remover o bot atual? (sim/n√£o)${NC}"
        read -p "> " CONFIRMAR
        if [ "$CONFIRMAR" = "sim" ]; then
            find "$AMBIENTE_PATH" -mindepth 1 -exec rm -rf {} + 2>/dev/null
            [ -z "$(ls -A "$AMBIENTE_PATH")" ] && echo -e "${GREEN}Bot removido com sucesso.${NC}" || echo -e "${RED}Erro ao remover o bot.${NC}"
        else
            echo -e "${RED}Remo√ß√£o cancelada.${NC}"
        fi
    else
        echo -e "${RED}Nenhum bot encontrado neste ambiente.${NC}"
    fi
    menu_principal
}

# ###########################################
# Fun√ß√£o para clonar reposit√≥rio
# - Prop√≥sito: Permite clonar reposit√≥rios p√∫blicos e privados no ambiente.
# - Editar:
#   * Ajuste as mensagens, se necess√°rio.
#   * Para tokens de acesso privado, mantenha as instru√ß√µes para o usu√°rio.
# ###########################################
clonar_repositorio() {
    AMBIENTE_PATH=$1
    echo -e "${CYAN}======================================${NC}"
    anima_texto "       CLONAR REPOSIT√ìRIO"
    echo -e "${CYAN}======================================${NC}"
    echo -e "${YELLOW}1 - Clonar reposit√≥rio p√∫blico${NC}"
    echo -e "${YELLOW}2 - Clonar reposit√≥rio privado${NC}"
    echo -e "${RED}0 - Voltar${NC}"
    read -p "> " OPCAO_CLONAR

    case $OPCAO_CLONAR in
        1)
            echo -e "${CYAN}Forne√ßa a URL do reposit√≥rio p√∫blico:${NC}"
            read -p "> " URL_REPOSITORIO
            if [[ $URL_REPOSITORIO != https://github.com/* ]]; then
                echo -e "${RED}URL inv√°lida!${NC}"
                clonar_repositorio "$AMBIENTE_PATH"
                return
            fi
            echo -e "${CYAN}Clonando reposit√≥rio p√∫blico...${NC}"
            git clone "$URL_REPOSITORIO" "$AMBIENTE_PATH" 2>/dev/null
            [ $? -eq 0 ] && echo -e "${GREEN}Reposit√≥rio clonado com sucesso!${NC}" || echo -e "${RED}Erro ao clonar o reposit√≥rio.${NC}"
            ;;
        2)
            echo -e "${CYAN}Forne√ßa a URL do reposit√≥rio privado:${NC}"
            read -p "> " URL_REPOSITORIO
            echo -e "${CYAN}Usu√°rio do GitHub:${NC}"
            read -p "> " USERNAME
            echo -e "${CYAN}Forne√ßa o token de acesso:${NC}"
            read -s -p "> " TOKEN
            echo
            GIT_URL="https://${USERNAME}:${TOKEN}@$(echo $URL_REPOSITORIO | cut -d/ -f3-)"
            echo -e "${CYAN}Clonando reposit√≥rio privado...${NC}"
            git clone "$GIT_URL" "$AMBIENTE_PATH" 2>/dev/null
            [ $? -eq 0 ] && echo -e "${GREEN}Reposit√≥rio privado clonado com sucesso!${NC}" || echo -e "${RED}Erro ao clonar o reposit√≥rio privado.${NC}"
            ;;
        0)
            menu_principal
            ;;
        *)
            echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
            clonar_repositorio "$AMBIENTE_PATH"
            ;;
    esac
}

# ###########################################
# Fun√ß√£o para o menu p√≥s-clone
# - Prop√≥sito: Permite que o usu√°rio escolha o que fazer ap√≥s clonar um reposit√≥rio.
# - Editar: 
#   * Ajustar mensagens, se necess√°rio.
#   * N√£o √© necess√°rio alterar a l√≥gica principal.
# ###########################################
pos_clone_menu() {
    AMBIENTE_PATH=$1
    echo -e "${CYAN}======================================${NC}"
    anima_texto "O QUE VOC√ä DESEJA FAZER AGORA?"
    echo -e "${CYAN}======================================${NC}"
    echo -e "${YELLOW}1 - Executar o bot${NC}"
    echo -e "${YELLOW}2 - Instalar m√≥dulos${NC}"
    echo -e "${RED}0 - Voltar para o menu principal${NC}"
    read -p "> " OPCAO_POS_CLONE

    case $OPCAO_POS_CLONE in
        1)
            iniciar_bot "$AMBIENTE_PATH"
            ;;
        2)
            instalar_modulos "$AMBIENTE_PATH"
            ;;
        0)
            menu_principal
            ;;
        *)
            echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
            pos_clone_menu "$AMBIENTE_PATH"
            ;;
    esac
}

# ###########################################
# Fun√ß√£o para instalar m√≥dulos
# - Prop√≥sito: Garante que as depend√™ncias necess√°rias para o bot sejam instaladas.
# - Editar:
#   * Ajustar mensagens, se necess√°rio.
#   * A l√≥gica principal n√£o requer altera√ß√µes.
# ###########################################
instalar_modulos() {
    AMBIENTE_PATH=$1
    echo -e "${CYAN}======================================${NC}"
    anima_texto "INSTALAR M√ìDULOS"
    echo -e "${CYAN}======================================${NC}"
    echo -e "${YELLOW}1 - Instalar com npm install${NC}"
    echo -e "${YELLOW}2 - Instalar com yarn install${NC}"
    echo -e "${RED}0 - Voltar para o menu principal${NC}"
    read -p "> " OPCAO_MODULOS

    case $OPCAO_MODULOS in
        1)
            echo -e "${CYAN}Instalando m√≥dulos com npm...${NC}"
            cd "$AMBIENTE_PATH" && npm install
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}M√≥dulos instalados com sucesso!${NC}"
            else
                echo -e "${RED}Erro ao instalar m√≥dulos com npm.${NC}"
            fi
            pos_clone_menu "$AMBIENTE_PATH"
            ;;
        2)
            echo -e "${CYAN}Instalando m√≥dulos com yarn...${NC}"
            cd "$AMBIENTE_PATH" && yarn install
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}M√≥dulos instalados com sucesso!${NC}"
            else
                echo -e "${RED}Erro ao instalar m√≥dulos com yarn.${NC}"
            fi
            pos_clone_menu "$AMBIENTE_PATH"
            ;;
        0)
            menu_principal
            ;;
        *)
            echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
            instalar_modulos "$AMBIENTE_PATH"
            ;;
    esac
}

# ###########################################
# Fun√ß√£o para iniciar o bot
# - Prop√≥sito: Inicia o bot com base nas configura√ß√µes do ambiente.
# - Editar:
#   * Ajustar mensagens, se necess√°rio.
#   * Mantenha a l√≥gica principal inalterada para evitar conflitos.
# ###########################################
iniciar_bot() {
    AMBIENTE_PATH=$1
    if [ -f "${AMBIENTE_PATH}/.session" ]; then
        STATUS=$(recuperar_status "$AMBIENTE_PATH")
        if [ "$STATUS" = "OFF" ]; then
            echo -e "${YELLOW}Sess√£o existente com status OFF.${NC}"
            echo -e "${YELLOW}1 - Reiniciar o bot${NC}"
            echo -e "${RED}0 - Voltar${NC}"
            read -p "> " OPCAO_EXISTENTE
            case $OPCAO_EXISTENTE in
                1)
                    COMANDO=$(cat "${AMBIENTE_PATH}/.session")
                    nohup sh -c "cd $AMBIENTE_PATH && $COMANDO" > "${AMBIENTE_PATH}/nohup.out" 2>&1 &
                    clear
                    atualizar_status "$AMBIENTE_PATH" "ON"
                    echo -e "${GREEN}Bot reiniciado com sucesso!${NC}"
                    menu_principal
                    ;;
                0)
                    menu_principal
                    ;;
                *)
                    echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
                    iniciar_bot "$AMBIENTE_PATH"
                    ;;
            esac
        elif [ "$STATUS" = "ON" ]; then
            echo -e "${RED}J√° existe uma sess√£o ativa neste ambiente.${NC}"
            echo -e "${RED}Por favor, finalize a sess√£o atual antes de iniciar outra.${NC}"
            echo -e "${YELLOW}0 - Voltar${NC}"
            read -p "> " OPCAO
            [ "$OPCAO" = "0" ] && menu_principal
        fi
    else
        echo -e "${CYAN}Escolha como deseja iniciar o bot:${NC}"
        echo -e "${YELLOW}1 - npm start${NC}"
        echo -e "${YELLOW}2 - Especificar arquivo (ex: index.js ou start.sh)${NC}"
        echo -e "${YELLOW}3 - Instalar m√≥dulos e executar o bot${NC}"
        echo -e "${RED}0 - Voltar${NC}"
        read -p "> " INICIAR_OPCAO

        case $INICIAR_OPCAO in
            1)
                echo "npm start" > "${AMBIENTE_PATH}/.session"
                clear
                echo -e "${YELLOW}Reinice o servidor assim que terminar para dar efeito${NC}"
                atualizar_status "$AMBIENTE_PATH" "ON"
                while true; do
                    cd "$AMBIENTE_PATH" && npm start
                    echo -e "${YELLOW}1 - Reiniciar o bot${NC}"
                    echo -e "${YELLOW}2 - Salvar e voltar ao menu principal${NC}"
                    echo -e "${RED}0 - Voltar${NC}"
                    read -p "> " OPC_REINICIAR
                    case $OPC_REINICIAR in
                        1)
                            echo -e "${CYAN}Reiniciando o processo...${NC}"
                            ;;
                        2)
                            echo -e "${GREEN}Salvando e voltando ao menu principal...${NC}"
                            menu_principal
                            ;;
                        0)
                            menu_principal
                            ;;
                        *)
                            echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
                            ;;
                    esac
                done
                ;;
            2)
                echo -e "${YELLOW}Digite o nome do arquivo para executar:${NC}"
                read ARQUIVO
                if [[ $ARQUIVO == *.sh ]]; then
                    echo "sh $ARQUIVO" > "${AMBIENTE_PATH}/.session"
                else
                    echo "node $ARQUIVO" > "${AMBIENTE_PATH}/.session"
                fi
                clear
                echo -e "${YELLOW}Reinice o servidor assim que terminar para dar efeito${NC}"
                atualizar_status "$AMBIENTE_PATH" "ON"
                while true; do
                    if [[ $ARQUIVO == *.sh ]]; then
                        cd "$AMBIENTE_PATH" && sh "$ARQUIVO"
                    else
                        cd "$AMBIENTE_PATH" && node "$ARQUIVO"
                    fi
                    echo -e "${YELLOW}1 - Reiniciar o bot${NC}"
                    echo -e "${YELLOW}2 - Salvar e voltar ao menu principal${NC}"
                    echo -e "${RED}0 - Voltar${NC}"
                    read -p "> " OPC_REINICIAR
                    case $OPC_REINICIAR in
                        1)
                            echo -e "${CYAN}Reiniciando o processo...${NC}"
                            ;;
                        2)
                            echo -e "${GREEN}Salvando e voltando ao menu principal...${NC}"
                            menu_principal
                            ;;
                        0)
                            menu_principal
                            ;;
                        *)
                            echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
                            ;;
                    esac
                done
                ;;
            3)
                verificar_node_modules "$AMBIENTE_PATH"
                if [ $? -eq 0 ]; then
                    echo "npm start" > "${AMBIENTE_PATH}/.session"
                    cd "$AMBIENTE_PATH" && npm start
                else
                    echo -e "${RED}Erro ao instalar m√≥dulos. Retornando ao menu...${NC}"
                    pos_clone_menu "$AMBIENTE_PATH"
                fi
                ;;
            0)
                menu_principal
                ;;
            *)
                echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
                iniciar_bot "$AMBIENTE_PATH"
                ;;
        esac
    fi
}


# ###########################################
# Fun√ß√£o para parar o bot
# - Prop√≥sito: Finaliza o processo do bot em execu√ß√£o em segundo plano.
# - Editar:
#   * Ajustar mensagens exibidas, se necess√°rio.
#   * A l√≥gica de finaliza√ß√£o do processo e atualiza√ß√£o do status n√£o deve ser alterada.
# ###########################################
parar_bot() {
    AMBIENTE_PATH=$1
    echo -e "${CYAN}======================================${NC}"
    anima_texto "PARAR O BOT"
    echo -e "${CYAN}======================================${NC}"
    if [ -f "${AMBIENTE_PATH}/.session" ]; then
        COMANDO=$(cat "${AMBIENTE_PATH}/.session")
        
        # Finaliza o processo do bot
        pkill -f "$COMANDO" 2>/dev/null
        clear
        atualizar_status "$AMBIENTE_PATH" "OFF"
        echo -e "${GREEN}Bot parado com sucesso.${NC}"
        echo -e "${YELLOW}Reinice o servidor assim que terminar para dar efeito.${NC}"
        exec /bin/bash
    else
        echo -e "${RED}Nenhuma sess√£o ativa encontrada para parar.${NC}"
    fi
    menu_principal
}

# ###########################################
# Fun√ß√£o para reiniciar o bot
# - Prop√≥sito: Reinicia o processo do bot com base nas configura√ß√µes do ambiente.
# - Editar:
#   * Mensagens exibidas, se necess√°rio.
#   * A l√≥gica principal deve permanecer inalterada para evitar conflitos.
# ###########################################
reiniciar_bot() {
    AMBIENTE_PATH=$1
    echo -e "${CYAN}======================================${NC}"
    anima_texto "REINICIAR O BOT"
    echo -e "${CYAN}======================================${NC}"
    if [ -f "${AMBIENTE_PATH}/.session" ]; then
        COMANDO=$(cat "${AMBIENTE_PATH}/.session")
        
        # Finaliza o processo antigo e inicia um novo
        pkill -f "$COMANDO" 2>/dev/null
        cd "$AMBIENTE_PATH" && nohup $COMANDO > nohup.out 2>&1 &
        clear
        atualizar_status "$AMBIENTE_PATH" "ON"
        echo -e "${GREEN}Bot reiniciado com sucesso.${NC}"
    else
        echo -e "${RED}Nenhuma sess√£o ativa encontrada para reiniciar.${NC}"
    fi
    menu_principal
}

# ###########################################
# Fun√ß√£o para visualizar o terminal
# - Prop√≥sito: Permite visualizar os logs gerados pelo bot.
# - Editar:
#   * Ajustar mensagens exibidas.
#   * N√£o alterar a l√≥gica para evitar erros ao acessar os logs.
# ###########################################
ver_terminal() {
    AMBIENTE_PATH=$1
    echo -e "${CYAN}======================================${NC}"
    anima_texto "VISUALIZAR O TERMINAL"
    echo -e "${CYAN}======================================${NC}"
    if [ -f "${AMBIENTE_PATH}/nohup.out" ]; then
        clear
        echo -e "${YELLOW}Quando reiniciar o servidor voc√™ precisa acessar o AMBIENTE e iniciar o servidor novamente na op√ß√£o 2.${NC}"
        atualizar_status "$AMBIENTE_PATH" "OFF"
        tail -f "${AMBIENTE_PATH}/nohup.out"
    else
        echo -e "${RED}Nenhuma sa√≠da encontrada para o terminal.${NC}"
    fi
    menu_principal
}

# ###########################################
# Fun√ß√£o para deletar a sess√£o
# - Prop√≥sito: Remove o arquivo de sess√£o associado ao bot e finaliza o processo em execu√ß√£o.
# - Editar:
#   * Ajustar mensagens exibidas, se necess√°rio.
#   * A l√≥gica de exclus√£o e finaliza√ß√£o do processo deve ser mantida.
# ###########################################
deletar_sessao() {
    AMBIENTE_PATH=$1
    echo -e "${CYAN}======================================${NC}"
    anima_texto "DELETAR SESS√ÉO"
    echo -e "${CYAN}======================================${NC}"
    if [ -f "${AMBIENTE_PATH}/.session" ]; then
        COMANDO=$(cat "${AMBIENTE_PATH}/.session")
        
        # Finaliza o processo e remove o arquivo de sess√£o
        pkill -f "$COMANDO" 2>/dev/null
        rm -f "${AMBIENTE_PATH}/.session"
        clear
        atualizar_status "$AMBIENTE_PATH" "OFF"
        echo -e "${GREEN}Sess√£o deletada com sucesso. Por favor, reinicie seu servidor para dar efeito.${NC}"
        exec /bin/bash
    else
        echo -e "${RED}Nenhuma sess√£o ativa encontrada para deletar.${NC}"
    fi
    menu_principal
}

# ###########################################
# Fun√ß√£o para gerenciar ambiente
# - Prop√≥sito: Fornece um menu interativo para gerenciar um ambiente espec√≠fico.
# - Editar:
#   * Mensagens exibidas para o usu√°rio podem ser personalizadas.
#   * N√£o altere as chamadas de fun√ß√µes ou l√≥gica principal do menu.
# ###########################################
gerenciar_ambiente() {
    # Define o caminho do ambiente com base no √≠ndice
    AMBIENTE_PATH="${BASE_DIR}/ambiente$1"

    # Cabe√ßalho do menu
    echo -e "${CYAN}======================================${NC}"
    anima_texto "GERENCIANDO AMBIENTE $1"
    echo -e "${CYAN}======================================${NC}"

    # Op√ß√µes do menu
    echo -e "${YELLOW}1 - ESCOLHER BOT PRONTO DA VORTEXUS${NC}"
    echo -e "${YELLOW}2 - INICIAR O BOT${NC}"
    echo -e "${YELLOW}3 - PARAR O BOT${NC}"
    echo -e "${YELLOW}4 - REINICIAR O BOT${NC}"
    echo -e "${YELLOW}5 - VISUALIZAR O TERMINAL${NC}"
    echo -e "${YELLOW}6 - DELETAR SESS√ÉO${NC}"
    echo -e "${YELLOW}7 - REMOVER BOT ATUAL${NC}"
    echo -e "${YELLOW}8 - CLONAR REPOSIT√ìRIO${NC}"
    echo -e "${RED}0 - VOLTAR${NC}"

    # Recebe a op√ß√£o do usu√°rio
    read -p "> " OPCAO

    # Switch para redirecionar para a fun√ß√£o correspondente
    case $OPCAO in
        1) 
            # Escolher bot pronto
            escolher_bot_pronto "$AMBIENTE_PATH"
            ;;
        2) 
            # Iniciar o bot
            iniciar_bot "$AMBIENTE_PATH"
            ;;
        3) 
            # Parar o bot
            parar_bot "$AMBIENTE_PATH"
            ;;
        4) 
            # Reiniciar o bot
            reiniciar_bot "$AMBIENTE_PATH"
            ;;
        5) 
            # Visualizar o terminal
            ver_terminal "$AMBIENTE_PATH"
            ;;
        6) 
            # Deletar sess√£o
            deletar_sessao "$AMBIENTE_PATH"
            ;;
        7) 
            # Remover bot atual
            remover_bot "$AMBIENTE_PATH"
            ;;
        8) 
            # Clonar reposit√≥rio
            clonar_repositorio "$AMBIENTE_PATH"
            ;;
        0) 
            # Voltar ao menu principal
            menu_principal
            ;;
        *) 
            # Op√ß√£o inv√°lida
            echo -e "${RED}Op√ß√£o inv√°lida.${NC}"
            gerenciar_ambiente "$1"
            ;;
    esac
}

# Execu√ß√£o principal
exibir_termos
criar_pastas
verificar_sessoes
menu_principal
#verificar_whitelist